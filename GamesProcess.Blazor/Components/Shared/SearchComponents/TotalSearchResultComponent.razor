@using GamesProcess.Models
@using GamesProcess.Models.ViewModels

@if (TotalSearchResults.Count == 0)
{
    <h4 class="col-12 text-info" style="align-content: center">The Search returned no results, Try Searching for Something else</h4>
}
else
{
    <div class="mb-3">
        <span>
            <span class="btn">Maximum Amount of Results to Display: </span>
            <input class="form-control-sm" type="number" min="0" max="50" name="SearchString" @bind="@_amountToDisplay" @oninput="_AmountToDisplayModified" />
        </span>

        <div class="float-md-right">
            <span class="btn text-center">
                Page <span class="text-info">@_currentPage</span> of <span class="text-info">@_lastPage</span>
            </span>
            <button class="btn @((_currentPage == 1) ? "" : "btn-outline-primary")" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
            <button class="btn @((_currentPage == _lastPage) ? "" : "btn-outline-primary") ml-2" disabled="@(_currentPage == _lastPage)" @onclick="NextPage">Next</button>
        </div>
    </div>

    <table class="table table-striped table-hover table-bordered" cellspacing="0" width="100%">
        <thead>
            <tr class="table-active">
                <th>Result ID</th>
                <th>Event DB ID</th>
                <th>Date</th>
                <th>Event Number</th>

                <th>W1</th>
                <th>W2</th>
                <th>W3</th>
                <th>W4</th>
                <th>W5</th>
                <th>W - Sum</th>
                <th style="width:2px;"></th>
                <th>M1</th>
                <th>M2</th>
                <th>M3</th>
                <th>M4</th>
                <th>M5</th>
                <th>M - Sum</th>
                <th>Game Name</th>
                <th>Game Group</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var searchResult in
         TotalSearchResults.Skip(_currentSkip).Take(_amountToDisplay))
            {
                @foreach (var eventResult in searchResult.Events)
                {
                    bool isRefWeek = (eventResult.EventID == searchResult.TotalValueEventID);

                    var signifyRefWeek = (isRefWeek) ? " R" : "";
                    var higlightRefWeek = (isRefWeek) ? "background-color:green; font-weight:bolder; color:aliceblue" : "";
                    //var higlightOtherValWeek = (isVal2Week) ? "background-color:dodgerblue; color:aliceblue" : "";

                    var highlightAllWinningWeek = (isRefWeek && SearchParameters.TotalValueType == 1 && eventResult.Winning.Sum() == SearchParameters.TotalValue) ? "background-color:yellow; color:green;" : "";

                    var highlightAllMachineWeek = (isRefWeek && SearchParameters.TotalValueType == 1 && eventResult.Machine.Sum() == SearchParameters.TotalValue) ? "background-color:yellow; color:green;" : "";

                    <tr class="" style="@higlightRefWeek">
                        <td>@(searchResult.ID + 1) @signifyRefWeek</td>
                        <td>@eventResult.EventID</td>
                        <td>@eventResult.Date</td>
                        <td>@eventResult.EventNumber</td>

                        @for (int i = 0; i < 5; i++)
                        {
                            var highlightTwoValueTotal = (isRefWeek && SearchParameters.TotalValueType == 2 && CheckTotalSumValue(eventResult.Winning, SearchParameters.TotalValue, eventResult.Winning[i])) ? "background-color:yellow; color:green;" : "";
                            <td class="" style="@highlightAllWinningWeek @highlightTwoValueTotal">@eventResult.Winning[i]</td>
                        }
                        <td style="@highlightAllWinningWeek">@eventResult.Winning.Sum()</td>
                        <td style="background-color: #fff; border:hidden; width:2px;"></td>
                        @for (int i = 0; i < 5; i++)
                        {
                            var highlightTwoValueTotal = (isRefWeek && SearchParameters.TotalValueType == 2 && CheckTotalSumValue(eventResult.Machine, SearchParameters.TotalValue, eventResult.Machine[i])) ? "background-color:yellow; color:green;" : "";
                            <td class="" style="@highlightAllMachineWeek @highlightTwoValueTotal">@eventResult.Machine[i]</td>
                        }
                        <td style="@highlightAllMachineWeek">@eventResult.Machine.Sum()</td>
                        <td>
                            @SearchParameters.GamesList.Skip(eventResult.GameID).First().Name.ToString()
                        </td>

                        <td>
                            @SearchParameters.GamesGroups.Skip((SearchParameters.GamesList.Skip(eventResult.GameID).First().GamesClassID)).First().Name.ToString()
                        </td>
                    </tr>
                }
                <tr style="background-color: grey"><td colspan="19"></td></tr>
            }
        </tbody>

    </table>

    <div class="mb-3">
        <span>
            <span class="btn">Maximum Amount of Results to Display: </span>
            <input class="form-control-sm" type="number" min="0" max="50" name="SearchString" @bind="@_amountToDisplay" @oninput="_AmountToDisplayModified" />
        </span>

        <div class="float-md-right">
            <span class="btn text-center">
                Page <span class="text-info">@_currentPage</span> of <span class="text-info">@_lastPage</span>
            </span>
            <button class="btn @((_currentPage == 1) ? "" : "btn-outline-primary")" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
            <button class="btn @((_currentPage == _lastPage) ? "" : "btn-outline-primary") ml-2" disabled="@(_currentPage == _lastPage)" @onclick="NextPage">Next</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public List<TotalSearchResult> TotalSearchResults { get; set; }
    [Parameter]
    public TotalSearchParameters SearchParameters { get; set; }

    #region Pagination
    int _resultCount => TotalSearchResults.Count();
    int _currentPage = 1;
    int _currentSkip = 0;
    int _amountToDisplay = 5;
    int _lastPage => (_resultCount % _amountToDisplay == 0)
                        ? (_resultCount / _amountToDisplay)
                        : (_resultCount / _amountToDisplay) + 1;
    void PreviousPage()
    {
        _currentPage = (_currentPage > 1) ? _currentPage - 1 : _currentPage;
        _currentSkip = (_currentPage - 1) * _amountToDisplay;
        this.StateHasChanged();
    }
    void NextPage()
    {
        _currentPage++;
        _currentSkip = (_currentPage - 1) * _amountToDisplay;
        this.StateHasChanged();
    }
    void _AmountToDisplayModified()
    {
        this.StateHasChanged();
    }
    #endregion

    public static bool CheckTotalSumValue( int[] arr, int sum, int num)
    {
        int num1, num2;
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = 0; j < arr.Length; j++)
            {
                if (i == j) continue;
                if (arr[i] + arr[j] == sum)
                {
                    num1 = arr[i];
                    num2 = arr[j];
                    return (num1 == num || num2 == num) ? true : false;
                }
            }
        }
        return false;
    }
}
